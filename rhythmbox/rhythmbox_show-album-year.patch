diff -ru rhythmbox.ORIG/src/rhythmbox/rhythmdb/rhythmdb-property-model.c rhythmbox/src/rhythmbox/rhythmdb/rhythmdb-property-model.c
--- rhythmbox.ORIG/src/rhythmbox/rhythmdb/rhythmdb-property-model.c	2024-11-22 14:42:56.679174837 -0800
+++ rhythmbox/src/rhythmbox/rhythmdb/rhythmdb-property-model.c	2024-11-22 14:42:56.955844042 -0800
@@ -60,6 +60,7 @@
 	RBRefString *sort_string;
 	gint sort_string_from;
 	gint refcount;
+	gint year;
 } RhythmDBPropertyModelEntry;
 
 static void rhythmdb_property_model_dispose (GObject *object);
@@ -740,7 +741,14 @@
 
 		propid = g_array_index (model->priv->sort_propids, RhythmDBPropType, pi);
 		newvalue = rhythmdb_entry_get_string (entry, propid);
+
 		if (newvalue != NULL && newvalue[0] != '\0') {
+			if (model->priv->propid == RHYTHMDB_PROP_ALBUM) {
+				newvalue = g_strdup_printf ("%04lu %s",
+					rhythmdb_entry_get_ulong(entry, RHYTHMDB_PROP_YEAR), newvalue
+				);
+			}
+
 			break;
 		}
 	}
@@ -828,6 +836,7 @@
 	prop->string = rb_refstring_new (propstr);
 	update_sort_string (model, prop, entry);
 	g_atomic_int_set (&prop->refcount, 1);
+	g_atomic_int_set(&prop->year, rhythmdb_entry_get_ulong (entry, RHYTHMDB_PROP_YEAR));
 
 	ptr = g_sequence_insert_sorted (model->priv->properties, prop,
 					(GCompareDataFunc) rhythmdb_property_model_compare,
@@ -958,6 +967,8 @@
 		return G_TYPE_BOOLEAN;
 	case RHYTHMDB_PROPERTY_MODEL_COLUMN_NUMBER:
 		return G_TYPE_UINT;
+	case RHYTHMDB_PROPERTY_MODEL_COLUMN_YEAR:
+		return G_TYPE_UINT;
 	default:
 		g_assert_not_reached ();
 		return G_TYPE_INVALID;
@@ -1041,6 +1052,10 @@
 			g_value_init (value, G_TYPE_UINT);
 			g_value_set_uint (value, g_atomic_int_get (&model->priv->all->refcount));
 			break;
+		case RHYTHMDB_PROPERTY_MODEL_COLUMN_YEAR:
+			g_value_init (value, G_TYPE_UINT);
+			g_value_set_uint (value, g_atomic_int_get (&model->priv->all->year));
+			break;
 		default:
 			g_assert_not_reached ();
 		}
@@ -1063,6 +1078,10 @@
 			g_value_init (value, G_TYPE_UINT);
 			g_value_set_uint (value, g_atomic_int_get (&prop->refcount));
 			break;
+		case RHYTHMDB_PROPERTY_MODEL_COLUMN_YEAR:
+			g_value_init (value, G_TYPE_UINT);
+			g_value_set_uint (value, g_atomic_int_get (&prop->year));
+			break;
 		default:
 			g_assert_not_reached ();
 		}
@@ -1455,6 +1474,7 @@
 			ENUM_ENTRY (RHYTHMDB_PROPERTY_MODEL_COLUMN_TITLE, "property-title"),
 			ENUM_ENTRY (RHYTHMDB_PROPERTY_MODEL_COLUMN_PRIORITY, "value-priority"),
 			ENUM_ENTRY (RHYTHMDB_PROPERTY_MODEL_COLUMN_NUMBER, "track-count"),
+			ENUM_ENTRY (RHYTHMDB_PROPERTY_MODEL_COLUMN_YEAR, "album-year"),
 			{ 0, 0, 0 }
 		};
 
diff -ru rhythmbox.ORIG/src/rhythmbox/rhythmdb/rhythmdb-property-model.h rhythmbox/src/rhythmbox/rhythmdb/rhythmdb-property-model.h
--- rhythmbox.ORIG/src/rhythmbox/rhythmdb/rhythmdb-property-model.h	2024-11-22 14:42:56.679174837 -0800
+++ rhythmbox/src/rhythmbox/rhythmdb/rhythmdb-property-model.h	2024-11-22 14:42:56.955844042 -0800
@@ -49,6 +49,7 @@
 	RHYTHMDB_PROPERTY_MODEL_COLUMN_TITLE,
 	RHYTHMDB_PROPERTY_MODEL_COLUMN_PRIORITY,
 	RHYTHMDB_PROPERTY_MODEL_COLUMN_NUMBER,
+	RHYTHMDB_PROPERTY_MODEL_COLUMN_YEAR,
 	RHYTHMDB_PROPERTY_MODEL_COLUMN_LAST,
 } RhythmDBPropertyModelColumn;
 
diff -ru rhythmbox.ORIG/src/rhythmbox/widgets/rb-property-view.c rhythmbox/src/rhythmbox/widgets/rb-property-view.c
--- rhythmbox.ORIG/src/rhythmbox/widgets/rb-property-view.c	2024-11-22 14:42:56.679174837 -0800
+++ rhythmbox/src/rhythmbox/widgets/rb-property-view.c	2024-11-22 14:42:56.955844042 -0800
@@ -660,22 +660,29 @@
 
 		switch (view->priv->propid) {
 		case RHYTHMDB_PROP_ARTIST:
-			fmt = ngettext ("%d artist (%d)", "All %d artists (%d)", nodes);
+			fmt = ngettext ("%d artist (%d)", "%d artists (%d)", nodes);
 			break;
 		case RHYTHMDB_PROP_ALBUM:
-			fmt = ngettext ("%d album (%d)", "All %d albums (%d)", nodes);
+			fmt = ngettext ("%d album (%d)", "%d albums (%d)", nodes);
 			break;
 		case RHYTHMDB_PROP_GENRE:
-			fmt = ngettext ("%d genre (%d)", "All %d genres (%d)", nodes);
+			fmt = ngettext ("%d genre (%d)", "%d genres (%d)", nodes);
 			break;
 		default:
-			fmt = ngettext ("%d (%d)", "All %d (%d)", nodes);
+			fmt = ngettext ("%d (%d)", "%d (%d)", nodes);
 			break;
 		}
 
 		str = g_strdup_printf (fmt, nodes, number);
 	} else {
-		str = g_strdup_printf (_("%s (%d)"), title, number);
+		if (view->priv->propid == RHYTHMDB_PROP_ALBUM) {
+			guint year;
+			gtk_tree_model_get(GTK_TREE_MODEL(tree_model), iter, RHYTHMDB_PROPERTY_MODEL_COLUMN_YEAR, &year, -1);
+
+			str = g_strdup_printf(_("(%d) %s"), year, title);
+		} else {
+			str = g_strdup_printf (_("%s"), title);
+		}
 	}
 
 	g_object_set (G_OBJECT (renderer), "text", str,
