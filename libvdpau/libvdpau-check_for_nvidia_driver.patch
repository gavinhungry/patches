diff -ru abs/libvdpau.ORIG/src/libvdpau-1.1/src/vdpau_wrapper.c abs/libvdpau/src/libvdpau-1.1/src/vdpau_wrapper.c
--- abs/libvdpau.ORIG/src/libvdpau-1.1/src/vdpau_wrapper.c	2014-07-21 11:15:23.362397250 -0700
+++ abs/libvdpau/src/libvdpau-1.1/src/vdpau_wrapper.c	2014-07-21 11:22:21.987785610 -0700
@@ -70,6 +70,36 @@
 #define DRIVER_FALLBACK_LIB_FORMAT "libvdpau_%s.so"
 #define DRIVER_LIB_FORMAT "%s/libvdpau_%s.so.1"
 
+/**
+ * Source: github.com/Bumblebee-Project/Bumblebee/blob/master/src/module.c
+ * Checks in /proc/modules whether a kernel module is loaded
+ *
+ * @param driver The name of the driver (not a filename)
+ * @return 1 if the module is loaded, 0 otherwise
+ */
+int module_is_loaded(char *driver) {
+    char buffer[4096];
+    FILE * modules = fopen("/proc/modules", "r");
+    int ret = 0;
+    /* assume mod_len <= sizeof(buffer) */
+    int mod_len = strlen(driver);
+
+    if (modules == 0) { // error opening, return 0
+        return 0;
+    }
+
+    while (fgets(buffer, sizeof(buffer), modules)) {
+        /* match "module" with "module " and not "module-blah" */
+        if (!strncmp(buffer, driver, mod_len) && isspace(buffer[mod_len])) {
+            /* module is found */
+            ret = 1;
+            break;
+        }
+    }
+    fclose(modules);
+    return ret;
+}
+
 static char * _vdp_get_driver_name_from_dri2(
     Display *             display,
     int                   screen
@@ -134,6 +164,11 @@
         }
     }
 
+    /* load libvdpau_nvidia.so only if the nvidia driver is already loaded */
+    if (!strcmp(vdpau_driver, "nvidia") && !module_is_loaded("nvidia")) {
+        return VDP_STATUS_NO_IMPLEMENTATION;
+    }
+
     /* Fallback to VDPAU_MODULEDIR when VDPAU_DRIVER_PATH is not set,
      * or if we fail to create the driver path/dlopen the library. */
     if (!_vdp_driver_dll) {
