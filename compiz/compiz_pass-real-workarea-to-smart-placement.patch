diff -ru compiz.ORIG/src/compiz-0.9.14.0/plugins/place/src/place.cpp compiz/src/compiz-0.9.14.0/plugins/place/src/place.cpp
--- compiz.ORIG/src/compiz-0.9.14.0/plugins/place/src/place.cpp	2018-01-02 10:06:51.539116903 -0800
+++ compiz/src/compiz-0.9.14.0/plugins/place/src/place.cpp	2018-01-02 10:10:38.727173660 -0800
@@ -585,7 +585,7 @@
 	    sendMaximizationRequest ();
 	    break;
 	case PlaceOptions::ModeSmart:
-	    placeSmart (pos, placeables);
+	    placeSmart (workArea, pos, placeables);
 	    break;
 	}
 
@@ -711,10 +711,11 @@
 using namespace compiz::place;
 
 void
-PlaceWindow::placeSmart (CompPoint			&pos,
+PlaceWindow::placeSmart (const CompRect   &workArea,
+			 CompPoint			&pos,
 			 const compiz::place::Placeable::Vector &placeables)
 {
-    compiz::place::smart (this, pos, placeables);
+    compiz::place::smart (this, workArea, pos, placeables);
 }
 
 static void
diff -ru compiz.ORIG/src/compiz-0.9.14.0/plugins/place/src/place.h compiz/src/compiz-0.9.14.0/plugins/place/src/place.h
--- compiz.ORIG/src/compiz-0.9.14.0/plugins/place/src/place.h	2018-01-02 10:06:51.539116903 -0800
+++ compiz/src/compiz-0.9.14.0/plugins/place/src/place.h	2018-01-02 10:10:48.340512931 -0800
@@ -133,7 +133,7 @@
 	void placeCentered (const CompRect& workArea, CompPoint& pos);
 	void placeRandom (const CompRect& workArea, CompPoint& pos);
 	void placePointer (const CompRect& workArea, CompPoint& pos);
-	void placeSmart (CompPoint& pos, const compiz::place::Placeable::Vector &);
+	void placeSmart (const CompRect& workArea, CompPoint& pos, const compiz::place::Placeable::Vector &);
 
 	bool cascadeFindFirstFit (const Placeable::Vector &placeabless,
 				  const CompRect& workArea,
diff -ru compiz.ORIG/src/compiz-0.9.14.0/plugins/place/src/smart/include/smart.h compiz/src/compiz-0.9.14.0/plugins/place/src/smart/include/smart.h
--- compiz.ORIG/src/compiz-0.9.14.0/plugins/place/src/smart/include/smart.h	2018-01-02 10:06:51.539116903 -0800
+++ compiz/src/compiz-0.9.14.0/plugins/place/src/smart/include/smart.h	2018-01-02 10:11:30.132128134 -0800
@@ -64,6 +64,7 @@
 	};
 
 	void smart (Placeable                      *placeable,
+				const CompRect		   &workArea,
 		    CompPoint			   &pos,
 		    const compiz::place::Placeable::Vector &placeables);
 
diff -ru compiz.ORIG/src/compiz-0.9.14.0/plugins/place/src/smart/src/smart.cpp compiz/src/compiz-0.9.14.0/plugins/place/src/smart/src/smart.cpp
--- compiz.ORIG/src/compiz-0.9.14.0/plugins/place/src/smart/src/smart.cpp	2018-01-02 10:06:51.539116903 -0800
+++ compiz/src/compiz-0.9.14.0/plugins/place/src/smart/src/smart.cpp	2018-01-02 10:13:00.821451355 -0800
@@ -26,6 +26,7 @@
 	}
 
 	void smart (Placeable                      *placeable,
+				const CompRect		   &workArea,
 		    CompPoint			   &pos,
 		    const compiz::place::Placeable::Vector &placeables)
 	{
@@ -46,8 +47,8 @@
 	    bool firstPass = true;
 
 	    /* get the maximum allowed windows space */
-	    int xTmp = placeable->workArea ().x ();
-	    int yTmp = placeable->workArea ().y ();
+	    int xTmp = workArea.x ();
+	    int yTmp = workArea.y ();
 
 	    /* client gabarit */
 	    int cw = placeable->geometry ().width () - 1;
@@ -60,9 +61,9 @@
 	    do
 	    {
 		/* test if enough room in x and y directions */
-		if (yTmp + ch > placeable->workArea ().bottom () && ch < placeable->workArea ().height ())
+		if (yTmp + ch > workArea.bottom () && ch < workArea.height ())
 		    overlap = H_WRONG; /* this throws the algorithm to an exit */
-		else if (xTmp + cw > placeable->workArea ().right ())
+		else if (xTmp + cw > workArea.right ())
 		    overlap = W_WRONG;
 		else
 		{
@@ -125,7 +126,7 @@
 		/* really need to loop? test if there's any overlap */
 		if (overlap > NONE)
 		{
-		    int possible = placeable->workArea ().right ();
+		    int possible = workArea.right ();
 
 		    if (possible - cw > xTmp)
 			possible -= cw;
@@ -159,8 +160,8 @@
 		/* else ==> not enough x dimension (overlap was wrong on horizontal) */
 		else if (overlap == W_WRONG)
 		{
-		    xTmp     = placeable->workArea ().x ();
-		    int possible = placeable->workArea ().bottom ();
+		    xTmp     = workArea.x ();
+		    int possible = workArea.bottom ();
 
 		    if (possible - ch > yTmp)
 			possible -= ch;
@@ -187,10 +188,10 @@
 		    yTmp = possible;
 		}
 	    }
-	    while (overlap != NONE && overlap != H_WRONG && yTmp < placeable->workArea ().bottom ());
+	    while (overlap != NONE && overlap != H_WRONG && yTmp < workArea.bottom ());
 
-	    if (ch >= placeable->workArea ().height ())
-		yOptimal = placeable->workArea ().y ();
+	    if (ch >= workArea.height ())
+		yOptimal = workArea.y ();
 
 	    pos.setX (xOptimal + placeable->extents ().left);
 	    pos.setY (yOptimal + placeable->extents ().top);
