diff -ru firefox.ORIG/src/firefox-72.0.2/devtools/client/shared/components/splitter/SplitBox.js firefox/src/firefox-72.0.2/devtools/client/shared/components/splitter/SplitBox.js
--- firefox.ORIG/src/firefox-72.0.2/devtools/client/shared/components/splitter/SplitBox.js	2020-02-07 09:28:01.925800193 -0800
+++ firefox/src/firefox-72.0.2/devtools/client/shared/components/splitter/SplitBox.js	2020-02-07 09:36:26.965817554 -0800
@@ -15,6 +15,8 @@
   require("devtools/client/shared/components/splitter/Draggable")
 );
 
+const VERT = false;
+
 /**
  * This component represents a Splitter. The splitter supports vertical
  * as well as horizontal mode.
@@ -42,7 +44,7 @@
       endPanelControl: PropTypes.bool,
       // Size of the splitter handle bar.
       splitterSize: PropTypes.number,
-      // True if the splitter bar is vertical (default is vertical).
+      // True if the splitter bar is vertical (default is VERT).
       vert: PropTypes.bool,
       // Style object.
       style: PropTypes.object,
@@ -56,7 +58,7 @@
   static get defaultProps() {
     return {
       splitterSize: 5,
-      vert: true,
+      vert: VERT,
       endPanelControl: false,
     };
   }
@@ -72,7 +74,7 @@
     this.state = {
       // True if the right/bottom panel should be controlled.
       endPanelControl: props.endPanelControl,
-      // True if the splitter bar is vertical (default is vertical).
+      // True if the splitter bar is vertical (default is VERT).
       vert: props.vert,
       // Size of the splitter handle bar.
       splitterSize: props.splitterSize,
@@ -88,7 +90,7 @@
   }
 
   componentWillReceiveProps(nextProps) {
-    const { endPanelControl, splitterSize, vert } = nextProps;
+    const { endPanelControl, splitterSize } = nextProps;
 
     if (endPanelControl != this.props.endPanelControl) {
       this.setState({ endPanelControl });
@@ -97,10 +99,6 @@
     if (splitterSize != this.props.splitterSize) {
       this.setState({ splitterSize });
     }
-
-    if (vert !== this.props.vert) {
-      this.setState({ vert });
-    }
   }
 
   shouldComponentUpdate(nextProps, nextState) {
@@ -108,7 +106,6 @@
       nextState.width != this.state.width ||
       nextState.endPanelControl != this.props.endPanelControl ||
       nextState.height != this.state.height ||
-      nextState.vert != this.state.vert ||
       nextState.splitterSize != this.state.splitterSize ||
       nextProps.startPanel != this.props.startPanel ||
       nextProps.endPanel != this.props.endPanel ||
@@ -137,7 +134,7 @@
   onStartMove() {
     const doc = this.splitBox.ownerDocument;
     const defaultCursor = doc.documentElement.style.cursor;
-    doc.documentElement.style.cursor = this.state.vert
+    doc.documentElement.style.cursor = VERT
       ? "ew-resize"
       : "ns-resize";
 
@@ -164,7 +161,8 @@
     const nodeBounds = this.splitBox.getBoundingClientRect();
 
     let size;
-    let { endPanelControl, vert } = this.state;
+    let { endPanelControl } = this.state;
+    let vert = VERT;
 
     if (vert) {
       // Use the document owning the SplitBox to detect rtl. The global document might be
@@ -222,7 +220,9 @@
 
   // eslint-disable-next-line complexity
   render() {
-    const { endPanelControl, splitterSize, vert } = this.state;
+    const { endPanelControl, splitterSize } = this.state;
+    const vert = VERT;
+
     const {
       startPanel,
       endPanel,
